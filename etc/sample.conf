# SFTdyn configuration file
#
# may be a .conf, but is actually a .py


# ----------------------------------------------------------------------------
# listen on "port" (all interfaces)
#        or "ip4address:port"
#        or "[ip6address]:port"
http = "8080"
#https = "4443"

# certificates for https, relative paths to this file possible.
#key = "/etc/sftdyn/snakeoil.key"
#cert = "/etc/sftdyn/snakeoil.crt"
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# client definitions
# map "urlsuffix" => "host to update with nsupdate"
# e.g. a query to "http://dyn.sft.mx/example" will update "host.dyn.sft.mx"
clients = {
    "example": "host.dyn.sft.mx",
    "?hostname=myclient.dyn.sft.mx&password=123456": "myclient.dyn.sft.mx",
}
# ----------------------------------------------------------------------------


# alternatively, you could fetch the definitions from a file:
# clients = dict(l.split(':') for l in open('clientlist').read().split('\n'))

# ----------------------------------------------------------------------------
def nsupdatecommands(host, new_ip, headers):
    """
    Return the lines fed into `nsupdate`'s stdin.

    Here you can, for example, customize the TTL (default 30s).
    """

    import ipaddress
    new_ip = ipaddress.ip_address(new_ip)

    if isinstance(new_ip, ipaddress.IPv4Address):
        cmds = [
            "update delete %s A" % host,
            "update add %s 30 A %s" % (host, new_ip),
            "send",
        ]

    else:
        cmds = [
            "update delete %s AAAA" % host,
            "update add %s 30 AAAA %s" % (host, new_ip),
            "send",
        ]

    return cmds


# vim: ft=python
