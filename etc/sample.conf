# SFTdyn configuration file
#
# This .conf file is actually a .py.
# -> you can write arbitrary python code in here!
#
# In "really complicated" setups you could redirect all calls to a database,
# for example.


# ----------------------------------------------------------------------------
# Listen on "port" (all interfaces) (default)
#        or "ip4address:port"
#        or "[ip6address]:port"
http = "8080"
#https = "4443"

# Certificates for https, relative paths to this file possible.
#key = "/etc/sftdyn/snakeoil.key"
#cert = "/etc/sftdyn/snakeoil.crt"

# ----------------------------------------------------------------------------
# Client hostname definitions.
#
# Map `querystring` => `hostname to update`
# e.g. a request to "http://dyn.sft.mx/example" will update "host.dyn.sft.mx"
# You should include a 'shared secret' in the url to prevent strangers
# from updating your host's IP.
CLIENTS = {
    # insecure simple example
    "example": "host.dyn.sft.mx",
    # more secure variant 0
    "?hostname=myclient.dyn.sft.mx&password=123456": "myclient.dyn.sft.mx",
    # more secure variant 1
    "host=gnampf.dyn.sft.mx,key=4bea92410b3146d0cfe": "gnampf.dyn.sft.mx",
    # you can come up with anything you like for the client's 'secret' url...
}

# Alternatively, you could fetch the definitions from a file that contains
# lines like this one:
#     host=gnampf.dyn.sft.mx,key=4bea92410b3146d0cfe: gnampf.dyn.sft.mx
# This list would then be read at sftdyn's startup.
# you can move the the file reading into the `get_host` function
# to reload the file on every request, if needed.
#
#CLIENTS = dict()
#with open("/etc/sftdyn/clientlist") as hdl:
#    for line in hdl:
#        key, host = line.split(":")
#        CLIENTS[key] = host.strip()
#
# the CLIENTS dict will be evaluated below in `get_host`

# ----------------------------------------------------------------------------
# Custom nsupdate authentication key
#
# This option may be used to specify an authentication key for nsupdate, which
# may be useful when the user running sftdyn doesn't have access to the key
# auto-generated by bind.
#
# For more information, see the -k option of nsupdate(1).
#
#nskeyfile = "/etc/bind/keys/sftdyn.key"

# ----------------------------------------------------------------------------
def get_ip(source_ip, headers, key):
    """
    Custom IP conversion function.

    `source_ip` is the IP that sftdyn saw as peer.
                if sftdyn is behind a proxy,
                it'll see the proxy IP, i.e. `localhost`
    `headers` is the http header dict.
              in there may be `X-Real-IP`, which contains the real peer IP.
    `key` is the (unsanitized) URL query string.

    You can modify the client IP address here however you like.
    The returned IP will be the `new_ip` that is passed
    into `nsupdatecommands`, after `key` was looked up by `get_host` below
    where it was associated with a hostname.

    If this function is missing from your config file,
    by default it does `return source_ip`.
    """

    # Update the peer IP when sftdyn is behind a proxy:
    #if 'X-Real-IP' in headers:
    #   source_ip = headers['X-Real-IP']

    return source_ip
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
def get_host(querystring, ip):
    """
    map "querystring" => "host to update with nsupdate"

    `querystring` is the part of the url after hostname and port without
                  the leading /.
    `ip` is the string returned by `get_ip` above.

    returns the `hostname` that is then passed to `nsupdatecommands` below.
    """

    return CLIENTS.get(querystring)
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
def nsupdatecommands(host, new_ip, headers):
    """
    Return the lines fed into `nsupdate`'s stdin.

    `host` is the hostname returned by `get_host` above.
    `new_ip` is the new IP returned by `get_ip` above.
    `headers` are the http headers that sftdyn received with the request.

    Here you can, for example, customize the TTL (default 30s).
    """

    import ipaddress
    new_ip = ipaddress.ip_address(new_ip)

    if isinstance(new_ip, ipaddress.IPv4Address):
        cmds = [
            "update delete %s A" % host,
            "update add %s 30 A %s" % (host, new_ip),
            "send",
        ]

    else:
        cmds = [
            "update delete %s AAAA" % host,
            "update add %s 30 AAAA %s" % (host, new_ip),
            "send",
        ]

    return cmds
# ----------------------------------------------------------------------------


# vim: ft=python
